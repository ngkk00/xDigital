services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: task_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: xdigital
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - task_network

  # Backend API
  backend:
    build:
      context: ./backend_node
      dockerfile: Dockerfile
    container_name: task_backend
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: mypassword
      DB_NAME: xdigital
      PORT: 3001
      env_file: .env
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend_node/.env:/app/.env
    restart: unless-stopped
    networks:
      - task_network

  # Frontend Application
  frontend:
    build:
      context: ./frontend_react
      dockerfile: Dockerfile
    container_name: task_frontend
    environment:
      VITE_API_URL: http://localhost:3001/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - task_network

volumes:
  postgres_data:

networks:
  task_network:
    driver: bridge